/*CS251 Interpreter part Lambda/Function
By: Cal Ellowitz, Tenzin Rigden, Dang Quang Tran.

*/

#include <stdio.h>
#include <stdlib.h>
#include <stdbool.h>
#include "talloc.h"
#include "linkedlist.h"
#include <string.h>
#include "interpreter.h"
#include "parser.h"
#include "primitives.h"

// Function to bind primitives
void bind(char *name, Value *(*function)(struct Value *), Frame *frame) {
    // Add primitive functions to top-level bindings list
    Value *value = talloc(sizeof(Value));
    value->type = PRIMITIVE_TYPE;
    value->pf = function;
    Value *nameNode = talloc(sizeof(Value));
    nameNode->type = STR_TYPE;
    nameNode->s = name;
    Value *newBinding = cons(nameNode, cons(value, makeNull()));
    frame->bindings = cons(newBinding,frame->bindings);
}

//printing functions for cons type results
//replicates much of the functionality
// of print tree from the parser but includes
// proper handing of cons cells that are not
// standard lists such as (1 . 3)
void printResult(Value *result) {
    switch (result->type) {
		    case INT_TYPE: 
		        printf("%i ",result->i);
		        break;
	        case DOUBLE_TYPE:
	            printf("%f ",result->d);
	            break;
	        case STR_TYPE:
	            printf("\"%s\" ",result->s);
	            break;
            case BOOL_TYPE:
                if (result->i == 0) {
                    printf("#f ");
                } else {
                    printf("#t ");
                }
                break;
            case SYMBOL_TYPE:
                printf("%s ", result->s);
                break;
            case CLOSURE_TYPE:
                printf("#<procedure> ");
                break;
            // this case is only for quoted parts
            // it prints the tree, using the parse tree
            // print function from the parser assignment    
            case CONS_TYPE:
                if (car(result)->type == CONS_TYPE) {
                    printf("(");
                }
                printResult(car(result));
                if ((cdr(result)->type != CONS_TYPE) && (cdr(result)->type != NULL_TYPE)) {
                    printf(". ");
                }
                printResult(cdr(result));
                if (car(result)->type == CONS_TYPE) {
                    printf("\b) ");
                }
        }
}

void interpret (Value *tree){
	Frame *frame = talloc(sizeof(Frame));
	frame->bindings = makeNull();
	frame->parent = NULL;
	
	//binding primitives
	bind("+",primitivePlus,frame);
	bind("*",primitiveMult,frame);
    bind("-",primitiveMinus, frame);
    bind("/",primitiveDivide, frame);
    bind("=",primitiveEqual, frame);
    bind("<",primitiveLess, frame);
    bind(">",primitiveGreater, frame);
    bind("modulo",primitiveModulo, frame);
    bind("null?",primitiveNull,frame);
    bind("car",primitiveCar,frame);
    bind("cdr",primitiveCdr,frame);
    bind("cons",primitiveCons,frame);
	Value *result;
	
	//While loop traverses through each function called (3, (let ...), etc) and prints them as each completes
	while (tree->type != NULL_TYPE){
		result = eval(car(tree), frame);
		tree = cdr(tree);
		switch (result->type) {
		    case INT_TYPE: 
		        printf("%i\n",result->i);
		        break;
	        case DOUBLE_TYPE:
	            printf("%f\n",result->d);
	            break;
	        case STR_TYPE:
	            printf("%s\n",result->s);
	            break;
            case BOOL_TYPE:
                if (result->i == 0) {
                    printf("#f\n");
                } else {
                    printf("#t\n");
                }
                break;
            case SYMBOL_TYPE:
                printf("%s\n", result->s);
                break;
            case NULL_TYPE:
                printf("()\n");
                break;
            case CLOSURE_TYPE:
                printf("#<procedure>\n");
                break;
            // this case is only for quoted parts
            // it prints the tree, using the parse tree
            // print function from the parser assignment    
            case CONS_TYPE:
                printf("(");
                printResult(result);
                printf("\b)\n");
        }
	}
}
//Looks up the value for the symbol given in the current frame first.
Value *lookUpSymbol(Value *tree, Frame *frame){
	//If your frame is null, you've run out of places to look. No binding found.
	if (frame == NULL){
		printf("Evaluation Error: No binding found\n");
		texit(1);
	}
	Value *bindings = frame->bindings;
	//While we still have bindings assigned, check if it matches the symbol we're looking up. 
	//If so, return the value for that binding, else continue going down the bindings.
	while (bindings->type != NULL_TYPE) {
	    if(!strcmp(tree->s, car(car(bindings))->s)){
		    return car(cdr(car(bindings)));
	    } else {
	        bindings = cdr(bindings);
        }
	}
	//No bindings found in the current frame, run it on the parent frame.
	return lookUpSymbol(tree, frame->parent);
}
//Evaluates if functions but first checks for correct input of 3 arguements (boolean cond1 cond2)
Value *evalIf(Value *args, Frame *frame){
	if (length(args) != 3){
		printf("Evaluation Error: Invalid arguments\n");
		texit(1);
	}
	//evaluate the condiction using our eval and the current frame, if true return the first condition else return the second (car(cdr(cdr))
	Value *condition = eval(car(args), frame);
	if (condition->type != BOOL_TYPE){
		printf("Evaluation Error: Invalid test\n");
		texit(1);
	}
	if (condition->i){
		return eval(car(cdr(args)), frame);
	}
	else{
		return eval(car(cdr(cdr(args))), frame);
	}
}

Value *evalLet(Value *args, Frame *frame){
	//We store our args as a list of cons types where the first cons type points to the list of list of bindings ((x 3)) and every following cons type
	//in args are functions like x or 3 or (if #t x 3) etc.
	if (car(args)->type != CONS_TYPE){
		printf("Evaluation Error: no binding in let\n");
		texit(1);
	}
	//No cdr means that there's no expression to evaluate after binding.
	if (cdr(args)->type == NULL_TYPE){
		printf("Evaluation Error: no expression in let\n");
		texit(1);
	}
	//Create a new frame that has parent pointing to current frame and no bindings.
	Frame *newFrame = talloc(sizeof(Frame));
	newFrame->bindings = makeNull();
	newFrame->parent = frame;
	Value *binders = car(args);
	//Traverse our list of list of binders and add everyone to the bindings list in newFrame.
	while (binders->type != NULL_TYPE){
		//if the car of the binders is not type cons type, we don't have a list of lists for the bindings, error.
    	if (car(binders)->type != CONS_TYPE) {
	        printf("Evaluation Error: improper bindings\n");
	        texit(1);
        }
		Value *newBinding = makeNull();
		Value *symbol = car(car(binders));
		//Runs our eval to evaluate the value that needs to be bounded. If it's a number, it just returns an int type with that number.
		//If it's a symbol, eval evaluates that symbol in the old frame (since it's let and not let*) and returns that value.
		Value *bound_value = cons(eval(car(cdr(car(binders))), frame), makeNull());
		//Make a new cons cell with the symbol and bound value then cons it to bindings.
		newBinding = cons(symbol, bound_value);
		newFrame->bindings = cons(newBinding, newFrame->bindings);
		binders = cdr(binders);
	}
	//Run the functions/expressions in the let that needs to be run then return the value of the last expression.
	Value *body = cdr(args);
	Value *returnval;
	while (body->type != NULL_TYPE) {
	    returnval = eval(car(body), newFrame);
	    body = cdr(body);
	}
	return returnval;
}

Value *evalLetStar(Value *args, Frame *frame){
//We store our args as a list of cons types where the first cons type points to the list of list of bindings ((x 3)) and every following cons type
	//in args are functions like x or 3 or (if #t x 3) etc.
	if (car(args)->type != CONS_TYPE){
		printf("Evaluation Error: no binding in let\n");
		texit(1);
	}
	//No cdr means that there's no expression to evaluate after binding.
	if (cdr(args)->type == NULL_TYPE){
		printf("Evaluation Error: no expression in let\n");
		texit(1);
	}
	Frame *newFrame;
	Value *oldFrame = frame;
	Value *binders = car(args);
	//Traverse our list of list of binders and add everyone to the bindings list in newFrame.
	while (binders->type != NULL_TYPE){
		//if the car of the binders is not type cons type, we don't have a list of lists for the bindings, error.
    	if (car(binders)->type != CONS_TYPE) {
	        printf("Evaluation Error: improper bindings\n");
	        texit(1);
        }
        //Create a new frame that has parent pointing to current frame and no bindings.
	    newFrame = talloc(sizeof(Frame));
	    newFrame->bindings = makeNull();
	    newFrame->parent = oldFrame;
		Value *newBinding = makeNull();
		Value *symbol = car(car(binders));
		// Creating binders of newFrame
		Value *bound_value = cons(eval(car(cdr(car(binders))), newFrame->parent), makeNull());
		//Make a new cons cell with the symbol and bound value then cons it to bindings.
		newBinding = cons(symbol, bound_value);
		newFrame->bindings = cons(newBinding, newFrame->bindings);
		binders = cdr(binders);
		oldFrame = newFrame;
	}
	//Run the functions/expressions in the let that needs to be run then return the value of the last expression.
	Value *body = cdr(args);
	Value *returnval;
	while (body->type != NULL_TYPE) {
	    returnval = eval(car(body), newFrame);
	    body = cdr(body);
	}
	return returnval;
}

Value *evalLetRec(Value *args, Frame *frame){
//We store our args as a list of cons types where the first cons type points to the list of list of bindings ((x 3)) and every following cons type
	//in args are functions like x or 3 or (if #t x 3) etc.
	if (car(args)->type != CONS_TYPE){
		printf("Evaluation Error: no binding in let\n");
		texit(1);
	}
	//No cdr means that there's no expression to evaluate after binding.
	if (cdr(args)->type == NULL_TYPE){
		printf("Evaluation Error: no expression in let\n");
		texit(1);
	}
	//Create a new frame that has parent pointing to current frame and no bindings.
	Frame *newFrame = talloc(sizeof(Frame));
	newFrame->bindings = makeNull();
	newFrame->parent = frame;
	Value *binders = car(args);
	//Traverse our list of list of binders and add everyone to the bindings list in newFrame.
	while (binders->type != NULL_TYPE){
		//if the car of the binders is not type cons type, we don't have a list of lists for the bindings, error.
    	if (car(binders)->type != CONS_TYPE) {
	        printf("Evaluation Error: improper bindings\n");
	        texit(1);
        }
		Value *newBinding = makeNull();
		Value *symbol = car(car(binders));
		// Creating binders of newFrame
		Value *bound_value = cons(eval(car(cdr(car(binders))), newFrame), makeNull());
		//Make a new cons cell with the symbol and bound value then cons it to bindings.
		newBinding = cons(symbol, bound_value);
		newFrame->bindings = cons(newBinding, newFrame->bindings);
		binders = cdr(binders);
	}
	//Run the functions/expressions in the let that needs to be run then return the value of the last expression.
	Value *body = cdr(args);
	Value *returnval;
	while (body->type != NULL_TYPE) {
	    returnval = eval(car(body), newFrame);
	    body = cdr(body);
	}
	return returnval;
}

Value *evalSetBang(Value *args, Frame *frame){
	if (car(args)->type != SYMBOL_TYPE){
		printf("Evaluation Error: no variable in define\n");
		texit(1);
	}
	if (cdr(args)->type == NULL_TYPE){
		printf("Evaluation Error: no expression in define\n");
		texit(1);
	}
	if (length(cdr(args)) != 1){
	    printf("Evaluation Error: invalid expression\n");
	    texit(1);
	}
    if (frame == NULL){
        printf("Evaluation Error: no binding found\n");
        texit(1);
    }
    Value *bindings = frame->bindings;
    while (bindings->type != NULL_TYPE){
        if (!strcmp(car(args)->s, car(car(bindings))->s)){
            Value *result = eval(car(cdr(args)), frame);
            bindings->c.car->c.cdr->c.car = result;
            Value *voidNode = talloc(sizeof(Value));
            voidNode->type = VOID_TYPE;
            return voidNode;
        }
        bindings = cdr(bindings);
    }
    evalSetBang(args, frame->parent);
}

Value *evalDefine(Value *args, Frame *frame){
    // Checking arguments
	if (car(args)->type != SYMBOL_TYPE){
		printf("Evaluation Error: no variable in define\n");
		texit(1);
	}
	if (cdr(args)->type == NULL_TYPE){
		printf("Evaluation Error: no expression in define\n");
		texit(1);
	}
	if (length(cdr(args)) != 1){
	    printf("Evaluation Error: invalid expression\n");
	    texit(1);
	}
	// Creating a new binding on the current frame
	Value *newBinding = cons(car(args), cons(eval(car(cdr(args)), frame), makeNull()));
	// Attaching it to the list of existing bindings
	frame->bindings = cons(newBinding,frame->bindings);
	// Creating a VOID_TYPE node to return
	Value *returnval = makeNull();
	returnval->type = VOID_TYPE;
	return returnval;
}


Value *evalBegin(Value *args, Frame *frame){
    // Evaluating all subexpressions except for the last
    if (length(args) == 0){
        Value *toReturn = talloc(sizeof(Value));
        toReturn->type = VOID_TYPE;
        return toReturn;
    }
    while (cdr(args)->type != NULL_TYPE){
        Value *intermediate = eval(car(args), frame);
        args = cdr(args);
    }
    // Returning the evaluation of the last subexpression
    Value *result = eval(car(args), frame);
    return result;
}

Value *evalAnd(Value *args, Frame *frame) {
    
    if (length(args) < 2) {
        printf("Evaluation Error: insufficient arguments\n");
        texit(1);
    }
    Value *returnval = talloc(sizeof(Value));
    returnval->type = BOOL_TYPE;
    while (args->type != NULL_TYPE) {
        Value *argument = eval(car(args), frame);
        if (argument->type != BOOL_TYPE) {
            printf("Evaluation Error: non-boolean argument\n");
            texit(1);
        } else if (argument->i == 0) {
            returnval->i = 0;
            return returnval;
        }
        args = cdr(args);
    }
    returnval->i = 1;
    return returnval;
}

Value *evalOr(Value *args, Frame *frame){
    Value *result = talloc(sizeof(Value));
    result->type = BOOL_TYPE;
    result->i = 0;
    if (length(args) < 2) {
        printf("not enought arguements\n");
        texit(1);
    }
    while (args->type != NULL_TYPE){
        Value *evaledArg = eval(car(args), frame);
        if (evaledArg->type != BOOL_TYPE){
            printf("Evaluation Error: arguement not a boolean\n");
            texit(1);
        }
        else{
            if (evaledArg->i != 0){
                result->i = 1;
                return result;
            }
        }
        args = cdr(args);
    }
    return result;
}

Value *evalCond(Value *args, Frame *frame){
    Value *toReturn = talloc(sizeof(Value));
    while (cdr(args)->type != NULL_TYPE){
        Value *cond_clause = car(args);
        //return eval(car(cdr(cond_clause)), frame);
        Value *boolean = eval(car(cond_clause), frame);
        if (boolean->i == 0){
            args = cdr(args);
        }
        else{
            toReturn = eval(car(cdr(cond_clause)), frame);
            return toReturn;
        }
    }
    Value *cond_clause = car(args);
    if (car(cond_clause)->type == SYMBOL_TYPE){
        if (!strcmp(car(cond_clause)->s, "else")){
            toReturn = eval(car(cdr(cond_clause)), frame);
            return toReturn;
        }
        else{
            Value *boolean = eval(car(cond_clause), frame);
            if (boolean->i == 0){
                args = cdr(args);
            }
            else{
                toReturn = eval(car(cdr(cond_clause)), frame);
                return toReturn;
            }
        }
    }
    
    else{
        Value *boolean = eval(car(cond_clause), frame);
        if (boolean->i == 0){
            toReturn->type = VOID_TYPE;
            return toReturn;
        }
        else{
            toReturn = eval(car(cdr(cond_clause)), frame);
            return toReturn;
        }
    }    
}

Value *evalLambda(Value *args, Frame *frame){
    // Checking for arguments
    if (car(args)->type != CONS_TYPE && car(args)->type != NULL_TYPE){
		printf("Evaluation Error: invalid lambda expression\n");
		texit(1);
	}
	if (cdr(args)->type == NULL_TYPE){
		printf("Evaluation Error: no expression in lambda\n");
		texit(1);
	}
	// Creating a closure with passed parameters at the current frame. 
	Value *closure = talloc(sizeof(Value));
	closure->type = CLOSURE_TYPE;
	closure->cl.paramNames = car(args);
	closure->cl.functionCode = cdr(args);
	closure->cl.frame = frame;
	return closure;
}

//Runs user defined function
Value *apply(Value *function, Value *args) {
	//Create a frame that will have all the bindings specified by the needed parameters
	//from the user defined function and the parameters passed when the user runs their function.
	Value *returnval;
    if (function->type == PRIMITIVE_TYPE) {
        returnval = function->pf(args);
    }
    else {
        Frame *funcFrame = talloc(sizeof(Frame));
        funcFrame->parent = function->cl.frame;
        funcFrame->bindings = makeNull();
        Value *toBind = function->cl.paramNames;
        if (length(args) != length(toBind)) {
            printf("Evaluation error: wrong number of parameters passed\n");
        }
        //Creates the above mentioned bindings in the funcframe.
        while (args->type != NULL_TYPE) {
            funcFrame->bindings = cons(cons(car(toBind), cons(car(args), makeNull())),funcFrame->bindings);
            args = cdr(args);
            toBind = cdr(toBind);
        }
        //Run the code using the the general eval function using our newly created frame as
        //the frame passed.
        Value *body = function->cl.functionCode;
        //run every function/expression in the lambda only returnning the last value.
        while (body->type != NULL_TYPE) {
            returnval = eval(car(body), funcFrame);
            body = cdr(body);
        }
    }
    return returnval;
}

//Big switch case Eval function. If it's any of the basic types (int, str, bool, double, null) just return the tree itself.
//

Value *eval(Value *tree, Frame *frame) {
   	switch (tree->type)  {
     	case INT_TYPE:
        	return tree;
        	break;
     	case STR_TYPE:
        	return tree;
        	break;
        case DOUBLE_TYPE:
        	return tree;
        	break;
        case BOOL_TYPE:
        	return tree;
        	break;
     	case SYMBOL_TYPE://Has to look up the value of the symbol then return it.
        	return lookUpSymbol(tree, frame);
        	break;
        case NULL_TYPE:
        	return tree;
        	break;
     	case CONS_TYPE://If it's a cons type, we evaluate special functions.
            if (frame == NULL) {
        		printf("Evaluation error: null frame\n");
        		texit(0);
        	}
            
            Value *first;
        	Value *args;
        	first = car(tree);
        	args = cdr(tree);
        	
        	if (first->type != SYMBOL_TYPE) {
        	    printf("Evaluation error: cannot evalue first function");
        	    texit(1);
        	}
        	
        	if (!strcmp(first->s,"if")) {
            	return evalIf(args,frame);
        	}

        	else if (!strcmp(first->s,"let")) {
        		return evalLet(args,frame);
        	} 
        	
        	// stops evaluating when it gets to quote
        	else if (!strcmp(first->s, "quote")) {
        	    return car(args);
    	    }
        	
        	else if (!strcmp(first->s, "define")) {
        		return evalDefine(args, frame);
        	}
        	
        	else if (!strcmp(first->s, "lambda")) {
        	    return evalLambda(args, frame);
        	}
            else if (!strcmp(first->s, "let*")) {
                return evalLetStar(args, frame);
            }
            else if (!strcmp(first->s, "letrec")) {
                return evalLetRec(args, frame);
            }
            else if (!strcmp(first->s, "set!")) {
                return evalSetBang(args, frame);
            }
            else if (!strcmp(first->s, "begin")) {
                return evalBegin(args, frame);
            }
            else if (!strcmp(first->s, "cond")) {
                return evalCond(args, frame);
            }
            else if (!strcmp(first->s, "and")) {
                return evalAnd(args, frame);
            }
            else if (!strcmp(first->s, "or")) {
                return evalOr(args, frame);
            }
        	else {
           		Value *evaledOperator = eval(first, frame);
                Value *evaledArgs = makeNull();
                while (args->type != NULL_TYPE) {
                    evaledArgs = cons(eval(car(args), frame), evaledArgs);
                    args = cdr(args);
                }
                evaledArgs = reverse(evaledArgs); 
                return apply(evaledOperator, evaledArgs);
        	}
        	break;
    }
 
    //If it gets here that means it wasn't any of the above types which means there was an error. 
    printf("Evaluation error\n");
    texit(0);    
}
